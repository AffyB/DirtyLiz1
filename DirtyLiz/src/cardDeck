
import java.util.HashMap;

import sts.g8way.api.TenderResult;


public class ContactlessKernelTypeId {

  /** A hashmap to support lookups */
  private static final HashMap apiValueMap = new HashMap();
  private static final HashMap nameMap = new HashMap();

  // *************
  // * Constants *
  // *************

  public static final ContactlessKernelTypeId VISA =
      new ContactlessKernelTypeId(TenderResult.VISA, "VISA");
  /**
   * @see TenderResult#MASTERCARD
   */
  public static final ContactlessKernelTypeId MASTERCARD =
      new ContactlessKernelTypeId(TenderResult.MASTERCARD, "MASTERCARD");
  /**
   * @see TenderResult#AMERICAN_EXPRESS
   */
  public static final ContactlessKernelTypeId AMERICAN_EXPRESS =
      new ContactlessKernelTypeId(TenderResult.AMERICAN_EXPRESS,
                                  "AMERICAN_EXPRESS");
  /**
   * @see TenderResult#NOT_CONTACTLESS
   */
  public static final ContactlessKernelTypeId NOT_CONTACTLESS =
      new ContactlessKernelTypeId(TenderResult.NOT_CONTACTLESS,
                                  "NOT_CONTACTLESS");

  // ***********
  // * Methods *
  // ***********

  /**
   * Private constructor to prevent additions to the enumeration.
   *
   * @param apiValue The API value as used in Tender.
   * @param name The name of this contactless kernel
   */
  private ContactlessKernelTypeId(int apiValue,
                                  String name) {
    this.apiValue = apiValue;
    this.name = name;

    // Store in a hashmaps for easy lookup
    nameMap.put(name, this);
    apiValueMap.put(new Integer(apiValue), this);
  }

  /**
   * Given a String name of a contactless kernel, returns the typesafe
   * enumeration equivalent.
   *
   * @param name The name of contactless kernel.
   * @return ContactlessKernelId The contactless kernel ID
   * @throws IllegalArgumentException If the name is not recognised.
   */
  public static ContactlessKernelTypeId valueOf(String name)
      throws IllegalArgumentException {
    ContactlessKernelTypeId value = (ContactlessKernelTypeId) nameMap.get(name);
    if (value == null)
      throw new IllegalArgumentException("Not a valid contactless kernel ID: "
                                         + name);
    return value;
  }

  /**
   * Given an integer value, returns the typesafe enumeration equivalent.
   *
   * @param apiValue int The identification code for the contactless kernel.
   * @return ContactlessKernelId The contactless kernel.
   * @throws IllegalArgumentException If the value is not recognised
   */
  public static ContactlessKernelTypeId valueOf(int apiValue)
      throws IllegalArgumentException {
    ContactlessKernelTypeId value =
        (ContactlessKernelTypeId) apiValueMap.get(new Integer(apiValue));
    if (value == null)
      throw new IllegalArgumentException("Not a valid contactless kernel ID: "
                                         + apiValue);
    return value;
  }

  /**
   * Returns the integer value for the given string.
   *
   * @param name String The name of the contactless kernel.
   * @return int An integer value that can be passed to
   *         {@link getContactlessKernelType}
   * @throws IllegalArgumentException If the <code>name</code> is not
   *         recognised.
   */
  public static int intValue(String name)
      throws IllegalArgumentException {
    return valueOf(name).apiValue;
  }

  /**
   * Returns a String representation of the given int
   *
   * @param apiValue The contactless kernel Id
   * @return String A String that can be passed to
   *         {@link getContactlessKernelType}
   * @throws IllegalArgumentException If the <code>apiValue</code> is not
   *         recognised.
   */
  public static String stringValue(int apiValue)
      throws IllegalArgumentException {
    return valueOf(apiValue).name;
  }

  /**
   * Returns the value used in {@link TenderResult#getContactlessKernelType}
   *
   * @return int A value that can be passed to
   *         {@link TenderResult#getContactlessKernelType}.
   */
  public int getAPIValue() {
    return apiValue;
  }

  /**
   * Returns the name of this contactless kernel
   */
  public String getName() {
    return name;
  }

  /**
   * Returns the name of this contactless kernel
   */
  public String toString() {
    return name;
  }


  private final int apiValue;
  private final String name;

}